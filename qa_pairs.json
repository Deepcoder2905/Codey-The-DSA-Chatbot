[
  {
    "question": "Given a positive integer num, write a function which returns True if num is a perfect \nsquare else False.\u200b",
    "solution": "class Solution { public: bool isPerfectSquare(int num) { int lo = 0, hi = num; while (lo <= \nhi) { int mid = lo + (hi - lo) / 2; long long s = (long long)mid * mid; if (s == num) { return true; } \nelse if (s > num) { hi = mid - 1; } else { lo = mid + 1; } } return (long long)hi * hi == num; } };\u200b"
  },
  {
    "question": "You have a total of n coins that you want to form in a staircase shape, where every \nk-th row must have exactly k coins. Given n, find the total number of full staircase rows that can \nbe formed. n is a non-negative integer and fits within the range of a 32-bit signed integer.\u200b",
    "solution": "class Solution { public: int arrangeCoins(int n) { long lo = 0, hi = n; while (lo <= hi) { long \nmid = lo + (hi - lo) / 2; if ((mid + 1) * mid / 2 > n) { hi = mid - 1; } else { lo = mid + 1; } } return lo - \n1; }\u200b"
  },
  {
    "question": "You are given a map in form of a two-dimensional integer grid where 1 represents land \nand 0 represents water. Grid cells are connected horizontally/vertically (not diagonally). The grid \nis completely surrounded by water, and there is exactly one island (i.e., one or more connected \nland cells). The island doesn't have \"lakes\" (water inside that isn't connected to the water \naround the island). One cell is a square with side length 1. The grid is rectangular, width and \nheight don't exceed 100. Determine the perimeter of the island.\u200b",
    "solution": "class Solution { public: int islandPerimeter(vector>& grid) { int ret = 0, m = grid.size(), n \n= grid[0].size(); for (int i = 0; i < m; ++i) { for (int j = 0; j < n; ++j) { if (grid[i][j] == 1) { if (i - 1 < 0) \n++ret; if (i + 1 == m) ++ret; if (i - 1 >= 0 && grid[i - 1][j] == 0) ++ret; if (i + 1 < m && grid[i + 1][j] \n== 0) ++ret; if (j - 1 < 0) ++ret; if (j + 1 == n) ++ret; if (j - 1 >= 0 && grid[i][j - 1] == 0) ++ret; if (j + \n1 < n && grid[i][j + 1] == 0) ++ret; } } } return ret; } };\u200b"
  },
  {
    "question": "We define a harmounious array as an array where the difference between its \nmaximum value and its minimum value is exactly 1. Now, given an integer array, you need to \nfind the length of its longest harmonious subsequence among all its possible subsequences.\u200b",
    "solution": "class Solution { public: int findLHS(vector& nums) { if (nums.empty()) return 0; map cnt; \nfor (auto& n : nums) ++cnt[n]; int ret = 0; for (auto& m : cnt) if (cnt[m.first - 1] > 0 && cnt[m.first] > \n0) ret = max(ret, cnt[m.first - 1] + cnt[m.first]); return ret; } };\u200b"
  },
  {
    "question": "Given a Binary Search Tree and a target number, return true if there exist two \nelements in the BST such that their sum is equal to the given target.\u200b",
    "solution": "class Solution { public: bool findTarget(TreeNode* root, int k) { vector nums; \ntree2vector(root, nums); for (int l = 0, r = nums.size() - 1; l < r;) { int s = nums[l] + nums[r]; if (s \n== k) { return true; } else if (s < k) { ++l; } else { --r; } } return false; } void tree2vector(TreeNode* \nroot, vector& nums) { if (root == nullptr) return; tree2vector(root->left, nums); \nnums.push_back(root->val); tree2vector(root->right, nums); } };\u200b"
  },
  {
    "question": "Given an array of integers A sorted in non-decreasing order, return an array of the \nsquares of each number, also in sorted non-decreasing order.\u200b",
    "solution": "class Solution { public: vector sortedSquares(vector& A) {vector ret; for (int l = 0, r = \nA.size() - 1; l <= r;) { if (abs(A[l]) > abs(A[r])) { ret.push_back(pow(A[l], 2)); ++l; } else { \nret.push_back(pow(A[r], 2)); --r; } } reverse(ret.begin(), ret.end()); return ret; } };"
  }
]